---
format:
  revealjs:
    incremental: false
    css: ../styles.css
    theme: ../theme_medium.scss
execute: 
  echo: true
---

# Day 4: Data loading and tidying with tidyverse
```{r}
#| echo: false
old <- options(pillar.print_min = 6)
```

## Refresher: vectors

- Recall that a **vector** is a **series of values** that are all the same **type**

```{r}
# A numeric vector:
c(1, 2, 3)

# A character vector:
c("banana", "orange", "apple")

# A logical vector:
c(TRUE, FALSE, TRUE)
```

## About dataframes

- A **dataframe** is a **collection of vectors**
  - basically like a **spreadsheet** in Excel

![](../images/dataframe.png){fig-alt="Image of a data frame" height="320"}

. . .

- Today we will learn to **load** and **tidy** (or "wrangle") dataframes

## About data tidying ("wrangling")

- Data often come to us in a form that is not suitable for analysis

- Data tidying (or "wrangling") is the process of **re-formatting the data so it can be analyzed**

---

![Getty Images](https://media.istockphoto.com/id/172342607/photo/cattle-drive.jpg?s=612x612&w=0&k=20&c=Fz--vTqe2gMWKxbHvgdLCgfUveH_Y3-k0js5H1m9Snc=)

---

![Image by Allison Horst](https://datasciencecampus.github.io/DSCA_data_wrangling_with_r/slides/images/data_cowboy.png){fig-alt="data wrangling monsters"}

## Set up project

- Create a new project called `gapminder-analysis` in the `data-analysis-course` folder on your Desktop
  - We will use the "gapminder" dataset for the rest of the course

- Inside that project, create a folder called `data_raw` to store raw data
  - You should **never edit raw data directly** (treat it as read-only)

- Also create a file to write today's code. You could call it `data-tidying-practice.R`

## Set up project

- Download the `gapminder.csv` file from this link, and put it in `data_raw`
  - <https://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0>

## About R Packages

- The functions we have used so far are included in R (called **"Base R"**)

- But sometimes we need to do something that is not available in Base R

- **Packages** are collections of code that **extend the functionality** of R
  - There are nearly 200,000 packages currently available!

## Install `tidyverse`

- Today we will use the `tidyverse` set of packages for **working with data**

- Install `tidyverse` using `install.packages()`:

```{r}
#| eval: false
install.packages("tidyverse")
```

## Loading packages

- The `install.packages()` function **downloads** the package to your computer
  - You only need to do this once per package (or when you want to update the package)

- But R isn't able to use the package yet

- The `library()` function tells R to **load** a package so that we can use it

## Load `tidyverse`

- Let's load the `tidyverse` package with `library()`
  - Note that you don't need to use quotation marks for the package name

```{r}
library(tidyverse)
```

## Load `tidyverse`

- `tidyverse` actually includes **multiple** packages (`dplyr`, `tidyr`, `readr`, etc.)
  - These are all packages that are useful for **loading** and **cleaning** data

## Load data

- Use the `read_csv()` function to load a spreadsheet as a dataframe
  - There are other functions for other file formats like `.xls`, `.xlsx`, `.tsv`, etc.

```{r}
#| echo: false
gapminder <- read_csv(here::here("day4/data_raw/gapminder.csv"))
```

```{r}
#| eval: false
gapminder <- read_csv("data_raw/gapminder.csv")
```

## Print out the data

- Inspect the data just like any other object (variable) in R: type the name of the object into the console

```{r}
gapminder
```

## Print out the data

- Notice that R tells us the number of **rows** and **columns**, as well as the **data type** of each column
  - The tidyverse package refers to dataframes as "tibbles"

## What is this dataset about?

- What do you think this dataset is about?

- What do you think the columns mean?

## Gapminder

- This is a dataset of economic statistics from various countries over time, from <https://gapminder.org>

- The meaning of some columns is obvious (`country`, `continent`, `year`), but not others
  - `pop`: Population
  - `lifeExp`: Life expectancy (寿命)
  - `gdpPercap`: GDP per capita (一人当たりの国内総生産)

## Sort data with `arrange()`

- First provide the **name of the dataframe**, then the **column** to sort by

```{r}
arrange(gapminder, lifeExp)
```

## Sort data with `arrange()`

- The default setting is to sort from **small** to **large**
  - To sort in the reverse (**descending**) direction, use `desc()`

```{r}
arrange(gapminder, desc(lifeExp))
```

## Sort data with `arrange()`

- You can sort on **multiple** columns
  - Ties will be sorted by the next column

```{r}
arrange(gapminder, continent, lifeExp)
```

## Challenge

- Sort the data by **year**, first going from smallest to biggest, then from biggest to smallest.

- What is the **earliest** year in the data?

- What is the **latest** year in the data?

## Narrow down columns with `select()`

- First provide the **name of the dataframe**, then the **columns** to select

```{r}
select(gapminder, year, country, gdpPercap)
```

## Saving your output

- Notice that although we have used several functions, `gapminder` is still the same:

```{r}
gapminder
```

## Saving your output

- This is because we have not **saved** any of the output

- To do that, you need to create a new object with `<-`
  - You can call the object whatever you want, but use a name that is easy to remember

```{r}
gapminder_gdp <- select(gapminder, year, country, gdpPercap)
```

## Challenge

- **Select** only year, country, and population, then **sort** the data by population

## About pipes

- During the last challenge, you needed to save the output of the `select()` function, then use it as input into the `arrange()` function

- There is a simpler way to do this, called the "pipe"

- The pipe is written like this: `%>%`
  - Newer versions of R also let you write it like this: `|>`

## About pipes

- The pipe takes the output from one function and passes it to the input of the next function

- You can think of it as saying "and then"
  - Do this **and then** do this, **and then** do this...
  - Do this **`%>%`** do this, **`%>%`** do this...

## About pipes

- We can even use the pipe just with one function:
  - Read this as "start with `gapminder` **and then** select only year, country, and population"

```{r}
gapminder %>% select(year, country, pop)
```

## About pipes

- This becomes very useful when we want to do **multiple steps**
  - Read this as "start with `gapminder`, **and then** select only year, country, and population, **and then** arrange by year"

```{r}
#| eval: false
gapminder %>% select(year, country, pop) %>% arrange(year)
```

```{r}
#| echo: false
gapminder %>% select(year, country, pop) %>% arrange(year) %>% print(n = 4)
```

## About pipes

- We can make it easier to read by putting each step on its own line

```{r}
gapminder %>%
  select(year, country, pop) %>%
  arrange(year)
```

## About pipes

- This way, **you don't have to save each intermediate step**

- This is a very useful way to manipulate data

- I will now use the pipe (`%>%`) for the rest of the lesson

## Subset rows with `filter()`

- Use the `filter()` function to only keep rows that **meet a certain condition**

- For example, let's only keep the data in Europe:

```{r}
gapminder %>% filter(continent == "Europe")
```

## Challenge

Using the pipe (`%>%`) and the functions we have learned so far, filter the data to Asia, then select only the country, year, and population columns.

## Modify data with `mutate()`

- For example, we could change the units of population to millions of people:

```{r}
gapminder %>% mutate(pop = pop/1000000)
```

## Modify data with `mutate()`

- If we provide a new column name, that column will be added

```{r}
gapminder %>% mutate(pop_mil = pop/1000000)
```

## Challenge

- The `gdpPercap` column stands for Gross Domestic Product (GDP) per capita (per person)

- Calculate the **total** GDP using `mutate()`
  - hint: You need to use both the `pop` and `gdpPercap` columns

## Calculate summary statistics with `summarize()`

- For example, let's calculate the overall mean population:

```{r}
gapminder %>% summarize(mean_pop = mean(pop))
```

## Calculate summary statistics with `summarize()`

- Another example: the total population over all the data:

```{r}
gapminder %>% summarize(total_pop = sum(pop))
```

## Use `group_by()` to do calculations per group

- However, it is often more useful to calculate such summary statistics for **particular groups**

- To do this, first specify the groups with `group_by()`:

```{r}
#| eval: false
gapminder %>% group_by(continent)
```

```{r}
#| echo: false
gapminder %>% group_by(continent) %>% print(n = 4)
```

## Use `group_by()` to do calculations per group

- Next, use `summarize()` to calculate the summary statistic:

```{r}
gapminder %>%
  group_by(continent) %>%
  summarize(mean_pop = mean(pop))
```

## Difference between `mutate()` and `summarize()`

- `mutate()` calculates a new column (or over-writes an existing one) and **keeps the number of rows the same**

- `summarize()` calculates a new column and **decreases the number of rows**

```{r}
#| echo: false
options(old)
```

## Summary

- Sort data with `arrange()`
- Narrow down columns with `select()`
- Filter rows with `filter()`
- Modify data with `mutate()`
- Summarize data with `summarize()`
- Group data with `group_by()`
- Use the pipe (`%>%`) to chain steps together