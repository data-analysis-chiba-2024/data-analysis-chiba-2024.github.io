---
format:
  revealjs:
    incremental: false
    css: ../styles.css
    theme: ../theme_medium.scss
execute: 
  echo: true
---

# Day 6: Data visualization with ggplot2

```{r}
#| echo: false
old <- options(pillar.print_min = 6)
```

## What is EDA?

::: {.incremental}

- EDA stands for **E**xploratory **D**ata **A**nalysis

- EDA is the step of "getting to know" your data

- You have already been doing some EDA by sorting the data and understanding what is in each column

:::

## What is EDA?

::: {.incremental}

- Another very useful tool for EDA is **data visualization**

- Today we will learn how to visualize data using `ggplot2`
  - `ggplot2` is included in the `tidyverse` set of packages
  - There are other ways to do this such as using `plot()`. But `ggplot2` has more consistent syntax.

:::

---

![Image by Allison Horst](../images/ggplot2_exploratory.png){fig-alt="Monsters exploring data with ggplot2"}

## What makes a good plot?

![](../images/piechart3d.png)

- How about this one?

## Problems with this plot

:::: {.columns}

::: {.column width="50%"}
::: {.incremental}
- Colors **don't correspond** to contents (meat is green?)

- 3D doesn't have any meaning, only makes plot **more complicated**

- Hard for humans to visually compare **area**
:::
:::

::: {.column width="50%"}
![](../images/piechart3d.png)
:::

::::

## What makes a good plot?

- Simple

- Easy to understand

- Conveys a message

## What makes a good plot?

:::: {.columns}

::: {.column width="50%"}
Pie chart
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
Bar graph
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/proportional-ink.html
:::
::::

- **Bar graphs are better** than pie charts for comparing values!

## `ggplot2` approach to plotting

::: {.incremental}

- ***G***rammar of ***G***raphics: all plots share a common "grammar"
  1. Input **data**
  2. **Aesthetic mapping**: How to represent the data visually
    - aesthetic = 美的, mapping = 相当する. どんな美的な要素に相当するのかの指定
  3. **Geometry**: What **shape** to use for the plot

- Recommended Reading: [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/)

:::

## Aesthetic mappings

![](https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/common-aesthetics-1.png)

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/aesthetic-mapping.html
:::
::::

---

:::: {.columns}

::: {.column width="50%"}
Pie chart
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
Bar graph
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

- How is population represented ("**mapped**") in each plot?

- What is the shape ("**geometry**") of each plot?
---

:::: {.columns}

::: {.column width="50%"}
Pie chart
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
Bar graph
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

- How is population mapped in each plot?
  - Mapped to **area** in pie chart, **length** in bar graph

- What is the geometry of each plot?
  - **Circle** ("pie") in pie chart, **column** ("bar") in bar graph

## Reopen your project

- We will continue to use the `gapminder-analysis` project in the `data-analysis-course` folder on your Desktop

- Also create a file to write today's code. You could call it `data-viz-practice.R`

## Load `tidyverse`

- Let's load the `tidyverse` package with `library()`
  - Note that you don't need to use quotation marks for the package name
  - Also load the `scales` package, which is for making plot labels

```{r}
library(tidyverse)
library(scales)
```

## Load data

- Use the `read_csv()` function to load a spreadsheet as a dataframe

```{r}
#| echo: false
gapminder <- read_csv(here::here("day4/data_raw/gapminder.csv"))
```

```{r}
#| eval: false
gapminder <- read_csv("data_raw/gapminder.csv")
```

## Gapminder

- This is a dataset of economic statistics from various countries over time, from <https://gapminder.org>

- The meaning of some columns is obvious (`country`, `continent`, `year`), but not others
  - `pop`: Population
  - `lifeExp`: Life expectancy (寿命)
  - `gdpPercap`: GDP per capita (一人当たりの国内総生産)

## First plot

```{r}
#| echo: false
theme_set(theme_gray(base_size = 24))
```

```{r}
#| output-location: column
ggplot(data = gapminder)
```

## First plot

```{r}
#| output-location: column
ggplot(
  data = gapminder,
  mapping = aes(
    x = gdpPercap,
    y = lifeExp))
```

## First plot

```{r}
#| output-location: column
#| label: gdp-life
ggplot(
  data = gapminder,
  mapping = aes(
    x = gdpPercap,
    y = lifeExp)) +
  geom_point()
```

::: {.incremental}

- What does this plot tell us?

:::

## Challenge

- Modify the code to show how life expectancy has changed **over time**

## Add color

::: {.incremental}

- In the last challenge, we saw a general trend, but there could be **more detail within certain groups**, like continent or country

- Let's use **color** to show the **continent**

- What is **color** in `ggplot2`?
  - Color is an **aesthetic mapping**

:::

## Original plot

```{r}
#| output-location: column
ggplot(
  data = gapminder,
  mapping = aes(
    x = year,
    y = lifeExp)) +
  geom_point()
```

## Add color

```{r}
#| output-location: column
ggplot(
  data = gapminder,
  mapping = aes(
    x = year,
    y = lifeExp,
    color = continent)) +
  geom_point()
```

## Add color

```{r}
#| output-location: column
#| code-line-numbers: "6"
ggplot(
  data = gapminder,
  mapping = aes(
    x = year,
    y = lifeExp,
    color = continent)) +
  geom_point()
```

## Basic recipe

- All plots can be made using the same basic formula:

```
ggplot(data = INPUT-DATA, mapping = aes(MAPPING)) +
  GEOMETRY
```

## Basic recipe

- Since `data` always comes first and `mapping` second, we can omit those names and make our code a little simpler:

```
ggplot(INPUT-DATA, aes(MAPPING)) +
  GEOMETRY
```

---

```{r}
#| output-location: column
ggplot(
  gapminder, # DATA
  aes( # MAPPING
    x = year,
    y = lifeExp,
    color = continent)) +
  geom_point() # GEOMETRY
```

## Plotting lines

::: {.incremental}

- Let's try representing the data with a different **geometry** (shape)

- This time we will use lines (`geom_line()`)

:::

## Plotting lines

```{r}
#| output-location: column
ggplot(
  gapminder, # DATA
  aes( # MAPPING
    x = year,
    y = lifeExp,
    color = continent)) +
  geom_line() # GEOMETRY
```

- That looks a little odd. What is the problem?

## Plotting lines

::: {.incremental}

- Lines connect points along the x-axis

- But we only want to connect points **within each country**

- We need to add another **aesthic mapping** for that, the `group`

:::

## Plotting lines

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent)) +
  geom_line()
```

## Plotting lines

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line()
```

## Plotting lines

```{r}
#| output-location: column
#| code-line-numbers: "7"
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line()
```

## Adding layers with `+`

::: {.incremental}

- We can add additional plot layers using the `+` sign

- For example, lets add **points** on top of the **lines**

:::

## Adding layers with `+`

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line()
```

## Adding layers with `+`

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line() +
  geom_point()
```

## Adding layers with `+`

```{r}
#| output-location: column
#| code-line-numbers: "9"
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line() +
  geom_point()
```

## Challenge

The `ggtitle()` adds a title to a plot. Use `ggtitle()` as **another layer** to add a title to the last plot.

## Summary: Adding layers with `+`

:::: {.columns}

::: {.column width="50%"}

::: {.incremental}
- Each layer **modifies** the plot, so you can build it gradually

- Other things layers can do:
  - Set the plot **theme**
  - Change the **axes**
  - Add **labels**
  - and more!
:::

:::

::: {.column width="50%"}
![](../images/gglayers_edit.png)
:::

::::

:::: {.aside}
::: {.small}
https://r.qcbs.ca/workshop03/book-en/
:::
::::

## Modify an aesthetic

::: {.incremental}

- So far, we have been **mapping** aesthetics to variables in the data

- But you can also simply **assign** the same value to a particular aesthetic (such as color)

- Do this by setting its value **outside** of `mapping = aes()`

:::

## Modify an aesthetic

```{r}
#| output-location: column
#| code-line-numbers: "9"
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line() +
  geom_point()
```

## Modify an aesthetic

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line() +
  geom_point(color = "black")
```

## Modify an aesthetic

```{r}
#| output-location: column
#| code-line-numbers: "9"
ggplot(
  gapminder,
  aes(
    x = year,
    y = lifeExp,
    color = continent,
    group = country)) +
  geom_line() +
  geom_point(color = "black")
```

## Transformations

:::: {.columns}

::: {.column width="50%"}

- Let's go back to the life expectancy vs. GDP graph again:

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| label: gdp-life
```

:::

::::

## Transformations

:::: {.columns}

::: {.column width="50%"}

- Do you notice anything that makes this graph hard to read?

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| ref.label: gdp-life
```

:::

::::

## Transformations

:::: {.columns}

::: {.column width="50%"}
- Nearly **all the points are crowded to the left**, with only a few outliers on the right

::: {.incremental}
- We can make this easier to read by using a **log-transformation**
:::

:::

::: {.column width="50%"}
```{r}
#| echo: false
#| ref.label: gdp-life
```

:::

::::

## Transformations

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = gdpPercap,
    y = lifeExp)) +
  geom_point()
```

## Transformations

```{r}
#| output-location: column
ggplot(
  gapminder,
  aes(
    x = gdpPercap,
    y = lifeExp)) +
  geom_point() +
  scale_x_log10()
```

## Transformations

```{r}
#| output-location: column
#| code-line-numbers: "7"
ggplot(
  gapminder,
  aes(
    x = gdpPercap,
    y = lifeExp)) +
  geom_point() +
  scale_x_log10()
```

## Transformations

```{r}
#| output-location: column
#| code-line-numbers: "7-10"
ggplot(
  gapminder,
  aes(
    x = gdpPercap,
    y = lifeExp)) +
  geom_point() +
  scale_x_log10(
    labels = label_comma()
  )
```

## Multi-panel plots

::: {.incremental}

- `ggplot2` can make **multiple plots at once** using **facetting**

- Each **facet** is a mini-plot of some portion of the dataset
  - Define the facet group with `vars()`

- Let's try this for some countries in Asia

:::

## Multi-panel plots

- First, subset the data just to some countries in Asia (for this example)

```{r}
gapminder_asia <- filter(
  gapminder,
  country %in% c("Japan", "China", "Korea, Rep.", "Taiwan"))
```

## Multi-panel plots

```{r}
#| output-location: column
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line()
```

## Multi-panel plots

```{r}
#| output-location: column
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country))
```

## Multi-panel plots

```{r}
#| output-location: column
#| code-line-numbers: "7"
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country))
```

## Adjusting labels

::: {.incremental}

- When you "publish" your plot (this could be including it in a report for a class), it needs to be **clearly labeled**
  - Whoever is reading your report won't know what "lifeExp" means


:::

## Adjusting labels

```{r}
#| output-location: column
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country))
```

## Adjusting labels

```{r}
#| output-location: column
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country)) +
  labs(
    x = "Year",
    y = "Life Expectancy (years)",
    title = "Figure 1"
  )
```

## Adjusting labels

```{r}
#| output-location: column
#| code-line-numbers: "9-13"
ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country)) +
  labs(
    x = "Year",
    y = "Life Expectancy (years)",
    title = "Figure 1"
  )
```

## Saving your plot

::: {.incremental}

- If you need to you can save your plot in R, and write it out as an image file

- Use the `ggsave()` function

:::

## Saving your plot

```{r}
gapminder_asia_plot <- ggplot(
  gapminder_asia,
  aes(
    x = year,
    y = lifeExp)) +
  geom_line() +
  facet_wrap(vars(country)) +
  labs(
    x = "Year",
    y = "Life Expectancy (years)",
    title = "Figure 1"
  )
```

## Saving your plot

```{r}
#| eval: false
ggsave(plot = gapminder_asia_plot, file = "gapminder_asia.pdf")
```

- You can also save `.jpg`, `.png`, etc.

## Summary

::: {.incremental}

- Think about **what you want your graph to show**
- **Aesthetic mapping**: How to represent the data visually
- **Geometry**: What shape to use for the plot
- Build your plot using **layers**
- Basic recipe: `ggplot(INPUT-DATA, aes(MAPPING)) + GEOMETRY`

:::

# Final Project

## Project Description

- The final project is to **analyze a dataset**, including **at least two graphs**
  - Use **Quarto** to write the report (we will learn how to do this in the next two classes)

## Dataset

- You will choose a dataset from the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) project to analyze
  - Tidy Tuesday releases a dataset once a week to practice data analysis
  - Please browse the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) repo to choose a dataset

## Example Dataset

- [World's Oldest People](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-05-30/readme.md#verified-oldest-people)

- The `README` file in the dataset explains how to load it into R

## Preparing your report

- You will use quarto to prepare your report
  - We will learn more about quarto next week, so you don't need to worry about it for now.
  
- Start looking at the datasets so you can **choose one to analyze**.

- Start analyzing the dataset and practice visualizing the data

## Due dates

- The report (`report.qmd`) is due **2024-07-24 11:59PM**

# Extra credit

## Attend the `targets` workshop on July 17

- The `targets` R package helps you define **workflows** to run your analysis

- This is good for **reproducibilty** because you only need to run one R command to reproduce the entire analysis

## Workshop details

- July 17 1:30 PM ~ 4:30 PM

- Nishi Chiba Campus Library (Academic Link Center) "Kiwami" seminar room

- Materials
  - [Video in Japanese](https://togotv.dbcls.jp/en/20220331.html)
  - [Lesson in English](https://carpentries-incubator.github.io/targets-workshop/)